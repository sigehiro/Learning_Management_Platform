extends layout

block content
  h1 Create a New Goal
  if errors
    each error in errors
      p(style="color:red") #{error.msg}

  form(method="POST", action="/goals/add", id="goalForm")
    label Title:
    input(type="text", name="title", required)
    br
    label Description:
    input(type="text", name="description", required)
    br

    // Calendar display
    button(type="button", id="prevMonth") Previous
    h1#monthyear December #{year} <!-- Month name and year will be dynamically updated -->
    button(type="button", id="nextMonth") Next
    table
      thead
        tr
          th M
          th Tu
          th W
          th Th
          th F
          th Sa
          th Su
      tbody
        each week in calendar
          tr
            each day in week
              td
                if day
                  button(type="button", class="calendar-button", value=year + "-" + (month+1) + "-" + day, onclick="selectDate(this)") #{day}
    br
    // Hidden input field to store selected dates
    input(type="hidden", name="dueDate", id="dueDate")
    input(value="Create Goal", type="submit")

  script.
    let selectedDates = [];
    let currentMonth = #{month}; // Set current month (from the backend)
    let currentYear = #{year};   // Set current year (from the backend)
    
    // Update month name based on the current month index
    function monthName(month) {
      const months = ["January", "February", "March", "April", "May", "June", 
                      "July", "August", "September", "October", "November", "December"];
      return months[month];
    }

    // Function to update the calendar and month/year display
    function updateCalendar() {
      document.getElementById("monthyear").textContent = `${monthName(currentMonth)} ${currentYear}`;
      const firstDay = new Date(currentYear, currentMonth, 1).getDay();
      const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
      const tbody = document.querySelector("table tbody");
      tbody.innerHTML = "";

      let day = 1;
      for (let i = 0; i < 6; i++) {
        const row = document.createElement("tr");
        for (let j = 0; j < 7; j++) {
          const cell = document.createElement("td");
          if (i === 0 && j < firstDay || day > daysInMonth) {
            row.appendChild(cell);
          } else {
            const button = document.createElement("button");
            button.type = "button";
            button.className = "calendar-button";
            button.textContent = day;
            button.value = `${currentYear}-${currentMonth + 1}-${day}`;
            button.onclick = function () { selectDate(this); };
            if (selectedDates.includes(button.value)) button.style.backgroundColor = 'lightgreen';
            cell.appendChild(button);
            day++;
          }
          row.appendChild(cell);
        }
        tbody.appendChild(row);
        if (day > daysInMonth) break;
      }
    }

    // Handle previous and next month navigation
    document.getElementById("prevMonth").onclick = function () {
      currentMonth = (currentMonth - 1 + 12) % 12;
      if (currentMonth === 11) currentYear--;
      updateCalendar();
    };

    document.getElementById("nextMonth").onclick = function () {
      currentMonth = (currentMonth + 1) % 12;
      if (currentMonth === 0) currentYear++;
      updateCalendar();
    };

    // Toggle date selection
    function selectDate(button) {
      const date = button.value;
      const index = selectedDates.indexOf(date);
      if (index === -1) {
        selectedDates.push(date);
        button.style.backgroundColor = 'lightgreen';
      } else {
        selectedDates.splice(index, 1);
        button.style.backgroundColor = '';
      }
      document.getElementById('dueDate').value = selectedDates;
    }

    // Initialize calendar
    updateCalendar();
