extends layout

block content
  // Include the stylesheet correctly as a self-closing tag
  link(rel="stylesheet", href="/stylesheets/index.css")

  .header-container
    h1 Task Management Overview
    .text-block
      h3 Welcome to #{title}!
      p Here you can see a visualization of all the tasks you have currently! The progress bar at the top shows how many of today's tasks you've completed, helping you track your daily goals. Below, you'll find an interactive chart that displays your task durations over time - switch between weekly and monthly views to get different perspectives on your workload. The vertical axis shows the estimated minutes for your tasks, while the horizontal axis shows the dates, making it easy to spot patterns in your task scheduling and identify busier periods.
  br

  //- Progress Bar Container
  .dashboard-container
    .progress-section
      h3 Today's Tasks Progress
      .progress-bar-container
        .progress-bar
          .progress-fill(style=`width: ${progressPercentage}%`)
        .progress-text #{progressPercentage}% Complete

    //- Chart Section
    .chart-section
      .chart-controls
        button#weekBtn.btn-primary Weekly
        button#monthBtn.btn-primary Monthly
      .chart-container
        canvas#taskChart

  //- Add Chart.js
  script(src="https://cdn.jsdelivr.net/npm/chart.js")
  
  //- Initialize Chart
  script.
    const tasks = !{JSON.stringify(tasks)};
    const ctx = document.getElementById('taskChart').getContext('2d');
    let chart;

    // Get today's tasks and calculate progress percentage
    const today = new Date().toDateString();
    const todayTasks = tasks.filter(task => new Date(task.dueDate).toDateString() === today);
    const completedToday = todayTasks.filter(task => task.status === 'completed');
    const progressPercentage = todayTasks.length > 0 ? Math.round((completedToday.length / todayTasks.length) * 100) : 0;

    // Update progress bar dynamically
    document.querySelector('.progress-fill').style.width = `${progressPercentage}%`;
    document.querySelector('.progress-text').innerText = `${progressPercentage}% Complete`;

    // Format date for the chart
    function formatDate(date) {
      return new Date(date).toLocaleDateString();
    }

    // Process task data for the chart
    function processData(timeRange) {
      const startDate = new Date();
      if (timeRange === 'week') startDate.setDate(startDate.getDate() - 7);
      else startDate.setDate(startDate.getDate() - 30);

      const filteredTasks = tasks.filter(task => {
        const taskDate = new Date(task.dueDate);
        return taskDate >= startDate;
      });

      const dates = [];
      const currentDate = new Date(startDate);
      while (currentDate <= new Date()) {
        dates.push(new Date(currentDate));
        currentDate.setDate(currentDate.getDate() + 1);
      }

      const groupedData = {};
      dates.forEach(date => {
        groupedData[formatDate(date)] = 0;
      });

      filteredTasks.forEach(task => {
        const date = formatDate(new Date(task.dueDate));
        groupedData[date] += task.estimatedTime;
      });

      return {
        labels: Object.keys(groupedData),
        data: Object.values(groupedData)
      };
    }

    // Update chart based on filtered data
    function updateChart(timeRange) {
      const chartData = processData(timeRange);
      if (chart) chart.destroy();
      chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: chartData.labels,
          datasets: [{
            label: 'Task Duration (minutes)',
            data: chartData.data,
            borderColor: '#018da5',
            backgroundColor: 'rgba(1, 141, 165, 0.1)',
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          scales: {
            y: { beginAtZero: true, title: { display: true, text: 'Minutes' } },
            x: { title: { display: true, text: 'Date' } }
          }
        }
      });
    }

    document.getElementById('weekBtn').addEventListener('click', () => updateChart('week'));
    document.getElementById('monthBtn').addEventListener('click', () => updateChart('month'));
    updateChart('week');
